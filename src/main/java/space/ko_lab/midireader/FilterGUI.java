/* 
 * By Laurens Weyn
 * All rights reserved and stuff.
 * Not my fault if anything blows up.
 */
package space.ko_lab.midireader;

import space.ko_lab.midireader.player.LocalPlayer;
import space.ko_lab.midireader.manipulation.EventProcessor;
import space.ko_lab.midireader.manipulation.EventRule;
import space.ko_lab.midireader.player.PlayerGenerator;
import space.ko_lab.midireader.core.BlockSet;
import space.ko_lab.midireader.core.Note;
import space.ko_lab.midireader.core.MIDIReader;
import space.ko_lab.midireader.core.MusicBlock;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import java.util.Collections;
import javax.swing.UnsupportedLookAndFeelException;
import space.ko_lab.midireader.manipulation.DrumKit;
import space.ko_lab.midireader.manipulation.Manipulator;
import space.ko_lab.midireader.manipulation.Mapping;
import space.ko_lab.midireader.player.Instrument;
import space.ko_lab.midireader.player.Player;
/**
 *
 * @author Laurens
 */
public final class FilterGUI extends javax.swing.JFrame
{
    EventRule noteStatus[] = new EventRule[17];
    DrumKit drumKit = new DrumKit();
    ArrayList<Manipulator> mods = new ArrayList<>();
    Player player;
    ArrayList<String> fileList = new ArrayList<>();
    ArrayList<String> configList = new ArrayList<>();
    //PrinterControl pc = new PrinterControl();
    //FloppyControl fc = new FloppyControl();
    //PlayerGenerator player;
    BlockSet parsedSong, parsedSongCfg;
    BlockSet manipulatedSong;
    BlockSet processedSong;
    BufferedImage origImg, manipImg, finalImg;
    /**
     * Creates new form FilterGUI
     */
    public FilterGUI()
    {
        Note.setColours();
        initComponents();
        resetRules();
        System.out.println("internal init done");
        //mods.add(new Manipulator(Manipulator.Mode.move, Manipulator.Criteria.timeFrame, false, 2, 3, 0, 20));
        //mods.add(new Manipulator(Manipulator.Mode.delete, Manipulator.Criteria.noteVelocity, true, 5, 0, 128, 256));
        //drumKit.drums.add(new DrumMapping(1,2,3));
        lstMods.setListData(mods.toArray());
        lstDrums.setListData(drumKit.drums.toArray());
        //removed for testing: cnc:P,COM5,3, 
        //printer:P1,P2,P3
        try
        {
            Instrument.loadInstruments(new File("instruments.csv"));
            Mapping.loadMapList(new File("mappings.csv"));
            btnRefreshFilesActionPerformed(null);
        }catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, "Error occured while loading configuration. Program cannot start.\n\n" + e);
            System.exit(1);
        }
        System.out.println("config loaded");
        try
        {
            //player = new NetworkPlayer();
            player = new LocalPlayer();
            player.init();
        }catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, "An error occured while trying to start the player:\n" + e);
            //e.printStackTrace();
        }
        System.out.println("instruments initialised");
        cmbMappings.removeAllItems();
        for(Mapping map:Mapping.knownMaps)cmbMappings.addItem(map);
        imageScroll.getVerticalScrollBar().setUnitIncrement(16);
    }
    public ImageIcon createImageIcon(String path, String description)
    {
        java.net.URL imgURL = getClass().getResource(path);
        if (imgURL != null)
        {
            return new ImageIcon(imgURL, description);
        } else
        {
            System.out.println("Couldn't find file: " + path);
            return null;
        }
    }
    public void resetRules()
    {
        for (int i = 0; i < noteStatus.length; i++)
        {
            noteStatus[i] = new EventRule(i);
        }
        noteStatus[9].mapping = Mapping.percussion;//CH10 is percussion by default
        lstChannels.setListData(noteStatus);
        lstChannelsValueChanged(null);
        chbLimitActionPerformed(null);//update
        lstChannels.updateUI();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        imageModeGroup = new javax.swing.ButtonGroup();
        imageScroll = new javax.swing.JScrollPane();
        imgLabel = new javax.swing.JLabel();
        leftPanel = new javax.swing.JPanel();
        ManipulatePanel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        lstMods = new javax.swing.JList();
        btnModUp = new javax.swing.JButton();
        btnModDown = new javax.swing.JButton();
        btnModRemove = new javax.swing.JButton();
        btnModApply = new javax.swing.JButton();
        cmbModMode = new javax.swing.JComboBox();
        chbModInvert = new javax.swing.JCheckBox();
        cmbModCondition = new javax.swing.JComboBox();
        spnModMin = new javax.swing.JSpinner();
        jLabel10 = new javax.swing.JLabel();
        spnModMax = new javax.swing.JSpinner();
        cmbModFrom = new javax.swing.JComboBox();
        jLabel11 = new javax.swing.JLabel();
        cmbModTo = new javax.swing.JComboBox();
        btnModNew = new javax.swing.JButton();
        channelPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        cmbPriority = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        cmbFilter = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        spnOctave = new javax.swing.JSpinner();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstChannels = new javax.swing.JList();
        chbLimit = new javax.swing.JCheckBox();
        spnNoteLength = new javax.swing.JSpinner();
        btnSave = new javax.swing.JButton();
        btnChannelReset = new javax.swing.JButton();
        cmbMappings = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        rightPanel = new javax.swing.JPanel();
        controlsPanel = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        cmbFileList = new javax.swing.JComboBox();
        btnLoadSong = new javax.swing.JButton();
        btnLoadConfig = new javax.swing.JButton();
        btnSaveConfig = new javax.swing.JButton();
        btnRefreshFiles = new javax.swing.JButton();
        btnPlay = new javax.swing.JButton();
        btnInit = new javax.swing.JButton();
        btnStop = new javax.swing.JButton();
        cmbConfigList = new javax.swing.JComboBox();
        jLabel12 = new javax.swing.JLabel();
        btnPlayDelay = new javax.swing.JButton();
        imgSettingsPanel = new javax.swing.JPanel();
        radOrig = new javax.swing.JRadioButton();
        radFinal = new javax.swing.JRadioButton();
        btnRegenImage = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        spnWidth = new javax.swing.JSpinner();
        spnLength = new javax.swing.JSpinner();
        radManip = new javax.swing.JRadioButton();
        lblSongLength = new javax.swing.JLabel();
        lblNoteRange = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtTicker = new javax.swing.JTextArea();
        btnPlayFinal = new javax.swing.JButton();
        lblSongNotes = new javax.swing.JLabel();
        drumPanel = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        lstDrums = new javax.swing.JList();
        jLabel15 = new javax.swing.JLabel();
        spnDrumID = new javax.swing.JSpinner();
        btnDrumReset = new javax.swing.JButton();
        btnDrumApply = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        imageScroll.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        imgLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        imageScroll.setViewportView(imgLabel);

        ManipulatePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("MIDI changes (advanced)"));

        lstMods.setModel(new javax.swing.AbstractListModel()
        {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        lstMods.addListSelectionListener(new javax.swing.event.ListSelectionListener()
        {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt)
            {
                lstModsValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(lstMods);

        btnModUp.setText("/\\");
            btnModUp.addActionListener(new java.awt.event.ActionListener()
            {
                public void actionPerformed(java.awt.event.ActionEvent evt)
                {
                    btnModUpActionPerformed(evt);
                }
            });

            btnModDown.setText("\\/");
            btnModDown.addActionListener(new java.awt.event.ActionListener()
            {
                public void actionPerformed(java.awt.event.ActionEvent evt)
                {
                    btnModDownActionPerformed(evt);
                }
            });

            btnModRemove.setText("Remove");
            btnModRemove.addActionListener(new java.awt.event.ActionListener()
            {
                public void actionPerformed(java.awt.event.ActionEvent evt)
                {
                    btnModRemoveActionPerformed(evt);
                }
            });

            btnModApply.setText("Apply");
            btnModApply.addActionListener(new java.awt.event.ActionListener()
            {
                public void actionPerformed(java.awt.event.ActionEvent evt)
                {
                    btnModApplyActionPerformed(evt);
                }
            });

            cmbModMode.setModel(new DefaultComboBoxModel<>(Manipulator.Mode.values()));

            chbModInvert.setText("invert condition");

            cmbModCondition.setModel(new DefaultComboBoxModel<>(Manipulator.Criteria.values()));

            spnModMin.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(0.0d), Double.valueOf(0.0d), null, Double.valueOf(1.0d)));

            jLabel10.setText("to");

            spnModMax.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(0.0d), Double.valueOf(0.0d), null, Double.valueOf(1.0d)));

            cmbModFrom.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Channel 1", "Channel 2", "Channel 3", "Channel 4", "Channel 5", "Channel 6", "Channel 7", "Channel 8", "Channel 9", "Channel 10", "Channel 11", "Channel 12", "Channel 13", "Channel 14", "Channel 15", "Channel 16" }));

            jLabel11.setText("to");

            cmbModTo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Channel 1", "Channel 2", "Channel 3", "Channel 4", "Channel 5", "Channel 6", "Channel 7", "Channel 8", "Channel 9", "Channel 10", "Channel 11", "Channel 12", "Channel 13", "Channel 14", "Channel 15", "Channel 16" }));

            btnModNew.setText("add new");
            btnModNew.addActionListener(new java.awt.event.ActionListener()
            {
                public void actionPerformed(java.awt.event.ActionEvent evt)
                {
                    btnModNewActionPerformed(evt);
                }
            });

            javax.swing.GroupLayout ManipulatePanelLayout = new javax.swing.GroupLayout(ManipulatePanel);
            ManipulatePanel.setLayout(ManipulatePanelLayout);
            ManipulatePanelLayout.setHorizontalGroup(
                ManipulatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(ManipulatePanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(ManipulatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(ManipulatePanelLayout.createSequentialGroup()
                            .addGroup(ManipulatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(cmbModCondition, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(cmbModMode, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, ManipulatePanelLayout.createSequentialGroup()
                                    .addComponent(btnModUp)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(btnModDown)))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(ManipulatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(spnModMin)
                                .addComponent(cmbModFrom, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnModRemove, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(ManipulatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(ManipulatePanelLayout.createSequentialGroup()
                                    .addComponent(jLabel10)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(spnModMax))
                                .addGroup(ManipulatePanelLayout.createSequentialGroup()
                                    .addComponent(jLabel11)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(ManipulatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(cmbModTo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnModNew, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                            .addGap(10, 10, 10))
                        .addGroup(ManipulatePanelLayout.createSequentialGroup()
                            .addGroup(ManipulatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jScrollPane3)
                                .addGroup(ManipulatePanelLayout.createSequentialGroup()
                                    .addComponent(chbModInvert)
                                    .addGap(138, 138, 138)
                                    .addComponent(btnModApply, javax.swing.GroupLayout.DEFAULT_SIZE, 81, Short.MAX_VALUE)))
                            .addContainerGap())))
            );
            ManipulatePanelLayout.setVerticalGroup(
                ManipulatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(ManipulatePanelLayout.createSequentialGroup()
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(ManipulatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnModUp)
                        .addComponent(btnModDown)
                        .addComponent(btnModRemove)
                        .addComponent(btnModNew))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(ManipulatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cmbModMode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cmbModFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel11)
                        .addComponent(cmbModTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(ManipulatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cmbModCondition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(spnModMin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel10)
                        .addComponent(spnModMax, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(ManipulatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(chbModInvert)
                        .addComponent(btnModApply)))
            );

            channelPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Channel settings"));

            jLabel1.setText("Priority");

            cmbPriority.setModel(new DefaultComboBoxModel<>(EventRule.ChanPrty.values()));
            cmbPriority.addMouseListener(new java.awt.event.MouseAdapter()
            {
                public void mouseClicked(java.awt.event.MouseEvent evt)
                {
                    cmbPriorityMouseClicked(evt);
                }
                public void mouseReleased(java.awt.event.MouseEvent evt)
                {
                    cmbPriorityMouseReleased(evt);
                }
            });

            jLabel2.setText("Filter mode");

            cmbFilter.setModel(new DefaultComboBoxModel<>(EventRule.ChanMode.values()));

            jLabel4.setText("Octave shift");

            spnOctave.setModel(new javax.swing.SpinnerNumberModel(0, -7, 7, 1));

            lstChannels.setModel(new javax.swing.AbstractListModel()
            {
                String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
                public int getSize() { return strings.length; }
                public Object getElementAt(int i) { return strings[i]; }
            });
            lstChannels.addListSelectionListener(new javax.swing.event.ListSelectionListener()
            {
                public void valueChanged(javax.swing.event.ListSelectionEvent evt)
                {
                    lstChannelsValueChanged(evt);
                }
            });
            jScrollPane1.setViewportView(lstChannels);

            chbLimit.setText("max length");
            chbLimit.addActionListener(new java.awt.event.ActionListener()
            {
                public void actionPerformed(java.awt.event.ActionEvent evt)
                {
                    chbLimitActionPerformed(evt);
                }
            });

            spnNoteLength.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(0.0d), Double.valueOf(0.0d), null, Double.valueOf(0.1d)));

            btnSave.setText("Save");
            btnSave.addActionListener(new java.awt.event.ActionListener()
            {
                public void actionPerformed(java.awt.event.ActionEvent evt)
                {
                    btnSaveActionPerformed(evt);
                }
            });

            btnChannelReset.setText("Reset All");
            btnChannelReset.addActionListener(new java.awt.event.ActionListener()
            {
                public void actionPerformed(java.awt.event.ActionEvent evt)
                {
                    btnChannelResetActionPerformed(evt);
                }
            });

            cmbMappings.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

            jLabel3.setText("Mapping type");

            javax.swing.GroupLayout channelPanelLayout = new javax.swing.GroupLayout(channelPanel);
            channelPanel.setLayout(channelPanelLayout);
            channelPanelLayout.setHorizontalGroup(
                channelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(channelPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(channelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, channelPanelLayout.createSequentialGroup()
                            .addGroup(channelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel2)
                                .addComponent(jLabel1))
                            .addGap(32, 32, 32)
                            .addGroup(channelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(cmbFilter, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(cmbPriority, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(channelPanelLayout.createSequentialGroup()
                            .addComponent(jLabel3)
                            .addGap(20, 20, 20)
                            .addComponent(cmbMappings, 0, 227, Short.MAX_VALUE))
                        .addGroup(channelPanelLayout.createSequentialGroup()
                            .addGroup(channelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel4)
                                .addComponent(chbLimit))
                            .addGap(6, 6, 6)
                            .addGroup(channelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(spnOctave)
                                .addComponent(spnNoteLength)))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, channelPanelLayout.createSequentialGroup()
                            .addComponent(btnChannelReset)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnSave)))
                    .addContainerGap())
            );
            channelPanelLayout.setVerticalGroup(
                channelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, channelPanelLayout.createSequentialGroup()
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 193, Short.MAX_VALUE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(channelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(cmbPriority, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(channelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(cmbFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(channelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cmbMappings, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(channelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(spnOctave, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(channelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(chbLimit)
                        .addComponent(spnNoteLength, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(channelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnSave)
                        .addComponent(btnChannelReset))
                    .addContainerGap())
            );

            jLabel8.setText("Made by Laurens Weyn.");

            javax.swing.GroupLayout leftPanelLayout = new javax.swing.GroupLayout(leftPanel);
            leftPanel.setLayout(leftPanelLayout);
            leftPanelLayout.setHorizontalGroup(
                leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(leftPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(leftPanelLayout.createSequentialGroup()
                            .addGap(0, 0, Short.MAX_VALUE)
                            .addComponent(channelPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(leftPanelLayout.createSequentialGroup()
                            .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(ManipulatePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel8))
                            .addGap(0, 0, Short.MAX_VALUE))))
            );
            leftPanelLayout.setVerticalGroup(
                leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(leftPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(channelPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(ManipulatePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jLabel8)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            );

            controlsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Controls"));

            jLabel7.setText("song");

            cmbFileList.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

            btnLoadSong.setText("load song");
            btnLoadSong.addActionListener(new java.awt.event.ActionListener()
            {
                public void actionPerformed(java.awt.event.ActionEvent evt)
                {
                    btnLoadSongActionPerformed(evt);
                }
            });

            btnLoadConfig.setText("load config");
            btnLoadConfig.addActionListener(new java.awt.event.ActionListener()
            {
                public void actionPerformed(java.awt.event.ActionEvent evt)
                {
                    btnLoadConfigActionPerformed(evt);
                }
            });

            btnSaveConfig.setText("save config");
            btnSaveConfig.addActionListener(new java.awt.event.ActionListener()
            {
                public void actionPerformed(java.awt.event.ActionEvent evt)
                {
                    btnSaveConfigActionPerformed(evt);
                }
            });

            btnRefreshFiles.setText("refresh files");
            btnRefreshFiles.addActionListener(new java.awt.event.ActionListener()
            {
                public void actionPerformed(java.awt.event.ActionEvent evt)
                {
                    btnRefreshFilesActionPerformed(evt);
                }
            });

            btnPlay.setText("Play");
            btnPlay.addActionListener(new java.awt.event.ActionListener()
            {
                public void actionPerformed(java.awt.event.ActionEvent evt)
                {
                    btnPlayActionPerformed(evt);
                }
            });

            btnInit.setText("Init");
            btnInit.addActionListener(new java.awt.event.ActionListener()
            {
                public void actionPerformed(java.awt.event.ActionEvent evt)
                {
                    btnInitActionPerformed(evt);
                }
            });

            btnStop.setText("Stop");
            btnStop.addActionListener(new java.awt.event.ActionListener()
            {
                public void actionPerformed(java.awt.event.ActionEvent evt)
                {
                    btnStopActionPerformed(evt);
                }
            });

            cmbConfigList.setEditable(true);

            jLabel12.setText("Config");

            btnPlayDelay.setText("delayed play");
            btnPlayDelay.addActionListener(new java.awt.event.ActionListener()
            {
                public void actionPerformed(java.awt.event.ActionEvent evt)
                {
                    btnPlayDelayActionPerformed(evt);
                }
            });

            javax.swing.GroupLayout controlsPanelLayout = new javax.swing.GroupLayout(controlsPanel);
            controlsPanel.setLayout(controlsPanelLayout);
            controlsPanelLayout.setHorizontalGroup(
                controlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(controlsPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(controlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(controlsPanelLayout.createSequentialGroup()
                            .addComponent(jLabel7)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(cmbFileList, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, controlsPanelLayout.createSequentialGroup()
                            .addComponent(btnRefreshFiles)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnLoadSong, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, controlsPanelLayout.createSequentialGroup()
                            .addComponent(btnSaveConfig, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnLoadConfig))
                        .addGroup(controlsPanelLayout.createSequentialGroup()
                            .addComponent(jLabel12)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(cmbConfigList, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(controlsPanelLayout.createSequentialGroup()
                            .addComponent(btnPlay)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnInit)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnStop)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnPlayDelay)
                            .addGap(0, 0, Short.MAX_VALUE)))
                    .addContainerGap())
            );
            controlsPanelLayout.setVerticalGroup(
                controlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(controlsPanelLayout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(controlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel7)
                        .addComponent(cmbFileList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(controlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnLoadSong)
                        .addComponent(btnRefreshFiles))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(controlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cmbConfigList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel12))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(controlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnLoadConfig)
                        .addComponent(btnSaveConfig))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(controlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnPlay)
                        .addComponent(btnInit)
                        .addComponent(btnStop)
                        .addComponent(btnPlayDelay)))
            );

            imgSettingsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Image settings"));

            imageModeGroup.add(radOrig);
            radOrig.setSelected(true);
            radOrig.setText("Original");
            radOrig.addActionListener(new java.awt.event.ActionListener()
            {
                public void actionPerformed(java.awt.event.ActionEvent evt)
                {
                    radOrigActionPerformed(evt);
                }
            });

            imageModeGroup.add(radFinal);
            radFinal.setText("Final");
            radFinal.addActionListener(new java.awt.event.ActionListener()
            {
                public void actionPerformed(java.awt.event.ActionEvent evt)
                {
                    radFinalActionPerformed(evt);
                }
            });

            btnRegenImage.setText("Reload");
            btnRegenImage.addActionListener(new java.awt.event.ActionListener()
            {
                public void actionPerformed(java.awt.event.ActionEvent evt)
                {
                    btnRegenImageActionPerformed(evt);
                }
            });

            jLabel5.setText("Width multiplier");

            jLabel6.setText("Length multiplier");

            spnWidth.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(0), Integer.valueOf(0), null, Integer.valueOf(1)));
            spnWidth.setValue(10);

            spnLength.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(0.0d), Double.valueOf(0.0d), null, Double.valueOf(1.0d)));
            spnLength.setValue(60.0);

            imageModeGroup.add(radManip);
            radManip.setText("Manipulated");
            radManip.addActionListener(new java.awt.event.ActionListener()
            {
                public void actionPerformed(java.awt.event.ActionEvent evt)
                {
                    radManipActionPerformed(evt);
                }
            });

            lblSongLength.setText("Song length: ");

            lblNoteRange.setText("Note range:");

            jLabel13.setText("Text to scroll:");

            txtTicker.setColumns(20);
            txtTicker.setRows(5);
            jScrollPane2.setViewportView(txtTicker);

            btnPlayFinal.setText("Play final!");
            btnPlayFinal.addActionListener(new java.awt.event.ActionListener()
            {
                public void actionPerformed(java.awt.event.ActionEvent evt)
                {
                    btnPlayFinalActionPerformed(evt);
                }
            });

            lblSongNotes.setText("Total notes:");

            javax.swing.GroupLayout imgSettingsPanelLayout = new javax.swing.GroupLayout(imgSettingsPanel);
            imgSettingsPanel.setLayout(imgSettingsPanelLayout);
            imgSettingsPanelLayout.setHorizontalGroup(
                imgSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(imgSettingsPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(imgSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(imgSettingsPanelLayout.createSequentialGroup()
                            .addComponent(jLabel13)
                            .addGap(0, 0, Short.MAX_VALUE))
                        .addComponent(jScrollPane2)
                        .addComponent(btnPlayFinal, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(imgSettingsPanelLayout.createSequentialGroup()
                            .addGroup(imgSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel5)
                                .addComponent(radManip)
                                .addComponent(radFinal)
                                .addComponent(radOrig)
                                .addComponent(jLabel6))
                            .addGap(18, 18, 18)
                            .addGroup(imgSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(spnLength)
                                .addComponent(spnWidth)
                                .addGroup(imgSettingsPanelLayout.createSequentialGroup()
                                    .addGroup(imgSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(lblSongLength)
                                        .addComponent(lblNoteRange)
                                        .addComponent(lblSongNotes))
                                    .addGap(0, 0, Short.MAX_VALUE))))
                        .addComponent(btnRegenImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addContainerGap())
            );
            imgSettingsPanelLayout.setVerticalGroup(
                imgSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(imgSettingsPanelLayout.createSequentialGroup()
                    .addGroup(imgSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(radOrig)
                        .addComponent(lblSongLength))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(imgSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(radManip)
                        .addComponent(lblNoteRange))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(imgSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(radFinal)
                        .addComponent(lblSongNotes))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(imgSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel5)
                        .addComponent(spnWidth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(imgSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel6)
                        .addComponent(spnLength, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(btnRegenImage)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jLabel13)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(btnPlayFinal)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            );

            drumPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Drum mapping"));

            lstDrums.setModel(new javax.swing.AbstractListModel()
            {
                String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
                public int getSize() { return strings.length; }
                public Object getElementAt(int i) { return strings[i]; }
            });
            lstDrums.addListSelectionListener(new javax.swing.event.ListSelectionListener()
            {
                public void valueChanged(javax.swing.event.ListSelectionEvent evt)
                {
                    lstDrumsValueChanged(evt);
                }
            });
            jScrollPane4.setViewportView(lstDrums);

            jLabel15.setText("map to percussion ID:");

            spnDrumID.setModel(new javax.swing.SpinnerNumberModel());

            btnDrumReset.setText("Reset all");

            btnDrumApply.setText("Apply");
            btnDrumApply.addActionListener(new java.awt.event.ActionListener()
            {
                public void actionPerformed(java.awt.event.ActionEvent evt)
                {
                    btnDrumApplyActionPerformed(evt);
                }
            });

            javax.swing.GroupLayout drumPanelLayout = new javax.swing.GroupLayout(drumPanel);
            drumPanel.setLayout(drumPanelLayout);
            drumPanelLayout.setHorizontalGroup(
                drumPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(drumPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(drumPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane4)
                        .addGroup(drumPanelLayout.createSequentialGroup()
                            .addComponent(jLabel15)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(spnDrumID, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnDrumApply)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnDrumReset)))
                    .addContainerGap())
            );
            drumPanelLayout.setVerticalGroup(
                drumPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(drumPanelLayout.createSequentialGroup()
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(drumPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel15)
                        .addComponent(spnDrumID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnDrumReset)
                        .addComponent(btnDrumApply)))
            );

            javax.swing.GroupLayout rightPanelLayout = new javax.swing.GroupLayout(rightPanel);
            rightPanel.setLayout(rightPanelLayout);
            rightPanelLayout.setHorizontalGroup(
                rightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(rightPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(rightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(controlsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(drumPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(imgSettingsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addContainerGap())
            );
            rightPanelLayout.setVerticalGroup(
                rightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, rightPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(controlsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(imgSettingsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(drumPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            );

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
            getContentPane().setLayout(layout);
            layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(leftPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(imageScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 357, Short.MAX_VALUE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(rightPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            );
            layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(rightPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(leftPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(imageScroll)))
            );

            pack();
        }// </editor-fold>//GEN-END:initComponents
    
    private void radOrigActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_radOrigActionPerformed
    {//GEN-HEADEREND:event_radOrigActionPerformed
        updateImage();
    }//GEN-LAST:event_radOrigActionPerformed

    private void radFinalActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_radFinalActionPerformed
    {//GEN-HEADEREND:event_radFinalActionPerformed
        updateImage();
    }//GEN-LAST:event_radFinalActionPerformed
    public void updateImage()
    {
        if(radOrig.isSelected())
        {
            if(origImg == null)imgLabel.setIcon(null);
            else imgLabel.setIcon(new ImageIcon(origImg));
            updateSongInfo(parsedSongCfg);
        }
        else if (radManip.isSelected())
        {
            if(manipImg == null)imgLabel.setIcon(null);
            else imgLabel.setIcon(new ImageIcon(manipImg));
            updateSongInfo(manipulatedSong);
        }
        else if(radFinal.isSelected())
        {
            if(finalImg == null)imgLabel.setIcon(null);
            else imgLabel.setIcon(new ImageIcon(finalImg));
            updateSongInfo(processedSong);
        }
    }
    public void updateSongInfo(BlockSet song)
    {
        if(song == null)
        {
            lblSongLength.setText("Song length: ");
            lblNoteRange.setText("Note range: ");
            return;
        }
        lblSongLength.setText("Song length: " + song.songLen);
        lblNoteRange.setText("Note range: " + song.minNote + "-" + song.maxNote + " (" + (song.maxNote - song.minNote + ")"));
        lblSongNotes.setText("Total notes: " + song.songNotes);
    }
    private void btnRefreshFilesActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnRefreshFilesActionPerformed
    {//GEN-HEADEREND:event_btnRefreshFilesActionPerformed
        File folder = new File("songs");
        File[] listOfFiles = folder.listFiles();
        fileList.clear();
        for(File f:listOfFiles)
        {
            if(f.isFile() && f.getName().endsWith(".mid"))
            {
                fileList.add(f.getName().replace(".mid", ""));
            }
        }
        //reset combo box to correctly display files
        cmbFileList.removeAllItems();
        for(String s:fileList)
        {
            cmbFileList.addItem(s);
        }
    }//GEN-LAST:event_btnRefreshFilesActionPerformed

    private void btnLoadSongActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnLoadSongActionPerformed
    {//GEN-HEADEREND:event_btnLoadSongActionPerformed
        String songFile = "songs\\" + cmbFileList.getSelectedItem() + ".mid";
        parsedSong = MIDIReader.parseSong(songFile);
        if(evt != null)
        {
            origImg = parsedSong.genImage();
            updateImage();
        }
        
        File folder = new File("config");
        File[] listOfFiles = folder.listFiles();
        configList.clear();
        for(File f:listOfFiles)
        {
            if(f.isFile() && f.getName().startsWith(cmbFileList.getSelectedItem() + "-"))
            {
                configList.add(f.getName().replace(cmbFileList.getSelectedItem() + "-", "").replace(".csv", ""));
            }
        }
        
        //reset combo box to correctly display files
        cmbConfigList.removeAllItems();
        for(String s:configList)
        {
            cmbConfigList.addItem(s);
        }
    }//GEN-LAST:event_btnLoadSongActionPerformed

    private void btnRegenImageActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnRegenImageActionPerformed
    {//GEN-HEADEREND:event_btnRegenImageActionPerformed
        radFinal.setSelected(true);
        radOrig.setSelected(false);
        MusicBlock.width = (Integer)spnWidth.getValue();
        MusicBlock.lenMult = (Double)spnLength.getValue();
        System.out.println("loading...");
        btnLoadSongActionPerformed(null);
        parsedSongCfg = new BlockSet(parsedSong.validEvents);
        parsedSongCfg.calcStats();//TODO make this more optimal
        System.out.println("maipulating...");
        manipulatedSong = Manipulator.Manipulate(mods, parsedSong.validEvents);
        System.out.println("generating 1...");
        manipImg = manipulatedSong.genImage();
        System.out.println("post processing...");
        EventProcessor process = new EventProcessor(manipulatedSong.validEvents, noteStatus);
        System.out.println("mapping...");
        PlayerGenerator playGen = new PlayerGenerator(process.process(), drumKit);
        System.out.println("validating...");
        processedSong = new BlockSet(playGen.assign(false));
        drumKit.findDrums(processedSong.validEvents);
        lstDrums.setListData(drumKit.drums.toArray());
        System.out.println("generating 2...");
        finalImg = processedSong.genImage();
        //System.out.println("saving...");
        try
        {
            //File outputfile = new File("output.png");
            //ImageIO.write(origImg, "png", outputfile);
            
            //File outputfile2 = new File("output2.png");
            //ImageIO.write(finalImg, "png", outputfile2);
        } catch (Exception e)
        {
            System.out.println("error saving generated images:");
            e.printStackTrace();
        }
        
        System.out.println("done!");
        updateImage();
    }//GEN-LAST:event_btnRegenImageActionPerformed

    private void btnSaveConfigActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnSaveConfigActionPerformed
    {//GEN-HEADEREND:event_btnSaveConfigActionPerformed
        if(cmbConfigList.getSelectedItem().equals(""))
        {
            JOptionPane.showMessageDialog(this, "Name config file first!");
            return;
        }
        try
        {
            FileWriter fr = new FileWriter("config\\"+ cmbFileList.getSelectedItem() + "-" + cmbConfigList.getSelectedItem() + ".csv");
            String output = "";
            for(EventRule note:noteStatus)
            {
                output += note.toLine() + "\n";
            }
            output += "\n" + drumKit.toLine();
            output += "\n";
            boolean first = true;
            for(Manipulator m:mods)
            {
                if(first)
                {
                    output += m.toLine();
                    first = false;
                }
                else
                {
                    output += "," + m.toLine();
                }
            }
            fr.write(output);
            fr.close();
        }catch(Exception e)
        {
            System.out.println("error while saving config:");
            e.printStackTrace();
        }
        
    }//GEN-LAST:event_btnSaveConfigActionPerformed

    private void btnLoadConfigActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnLoadConfigActionPerformed
    {//GEN-HEADEREND:event_btnLoadConfigActionPerformed
        try(BufferedReader br = new BufferedReader(new FileReader("config\\"+ cmbFileList.getSelectedItem() + "-" + cmbConfigList.getSelectedItem() + ".csv")))
        {
            for (int i = 0; i < noteStatus.length; i++)
            {
                noteStatus[i] = new EventRule(br.readLine());
                noteStatus[i].setRender(i);
            }
            br.readLine();
            drumKit = new DrumKit(br.readLine());
            String modText[] = br.readLine().split(",");
            mods.clear();
            if(modText[0] != null && !modText[0].equals("null"))for(String s:modText)
            {
                if(!s.equals(""))mods.add(new Manipulator(s));
            }
            br.close();
            lstChannels.updateUI();
            lstMods.setListData(mods.toArray());
         }catch(FileNotFoundException e)
         {
             JOptionPane.showMessageDialog(this, "Config file does not exist!");
         }catch(Exception e)
         {
            System.out.println("error while loading config:");
            
            e.printStackTrace();
         }
        btnRegenImageActionPerformed(null);
    }//GEN-LAST:event_btnLoadConfigActionPerformed

    private void btnPlayActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnPlayActionPerformed
    {//GEN-HEADEREND:event_btnPlayActionPerformed
        player.stop();//stop old threads
        btnRegenImageActionPerformed(evt);
        player.play();
        //Instruments now contains data to send to server or play.
        //player = new PlayerGenerator(processedSong.validEvents,pc,fc);
        //new Thread(player).start();
        
    }//GEN-LAST:event_btnPlayActionPerformed

    private void btnInitActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnInitActionPerformed
    {//GEN-HEADEREND:event_btnInitActionPerformed
        try
        {
            player.reset();
        } catch(Exception ex)
        {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnInitActionPerformed

    private void btnStopActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnStopActionPerformed
    {//GEN-HEADEREND:event_btnStopActionPerformed
        player.stop();
    }//GEN-LAST:event_btnStopActionPerformed

    private void btnPlayFinalActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnPlayFinalActionPerformed
    {//GEN-HEADEREND:event_btnPlayFinalActionPerformed
        //JOptionPane.showMessageDialog(this, "TODO: get this operational again");
        PlayGUI.player = new PlayerGenerator(processedSong.validEvents, drumKit, txtTicker.getText());
        PlayerGenerator.playNotes = false;
        new Thread(new PlayGUI()).start();
        this.setVisible(false);
    }//GEN-LAST:event_btnPlayFinalActionPerformed

    private void btnChannelResetActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnChannelResetActionPerformed
    {//GEN-HEADEREND:event_btnChannelResetActionPerformed
        resetRules();
    }//GEN-LAST:event_btnChannelResetActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnSaveActionPerformed
    {//GEN-HEADEREND:event_btnSaveActionPerformed
        int pos = lstChannels.getSelectedIndex();
        if(pos == -1)return;
        EventRule rule = noteStatus[pos];
        rule.noteShift = (Integer)spnOctave.getValue() * Note.notesInOctave;
        rule.mode = (EventRule.ChanMode)cmbFilter.getSelectedItem();
        rule.mapping = (Mapping)cmbMappings.getSelectedItem();
        rule.prty = (EventRule.ChanPrty)cmbPriority.getSelectedItem();
        rule.maxNoteLen = (double)spnNoteLength.getValue();
        if(!chbLimit.isSelected())rule.maxNoteLen = Double.MAX_VALUE;
        noteStatus[pos] = rule;
        lstChannels.setListData(noteStatus);
        lstChannels.setSelectedIndex(pos);
        lstChannels.updateUI();
    }//GEN-LAST:event_btnSaveActionPerformed

    private void chbLimitActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_chbLimitActionPerformed
    {//GEN-HEADEREND:event_chbLimitActionPerformed
        spnNoteLength.setEnabled(chbLimit.isSelected());
        btnSaveActionPerformed(null);
    }//GEN-LAST:event_chbLimitActionPerformed

    private void lstChannelsValueChanged(javax.swing.event.ListSelectionEvent evt)//GEN-FIRST:event_lstChannelsValueChanged
    {//GEN-HEADEREND:event_lstChannelsValueChanged
        int pos = lstChannels.getSelectedIndex();
        boolean enable = pos != -1;
        spnOctave.setEnabled(enable);
        spnNoteLength.setEnabled(enable);
        cmbFilter.setEnabled(enable);
        cmbMappings.setEnabled(enable);
        cmbPriority.setEnabled(enable);
        chbLimit.setEnabled(enable);
        if(pos == -1)return;
        EventRule rule = noteStatus[pos];
        spnOctave.setValue(rule.noteShift/Note.notesInOctave);
        spnNoteLength.setValue(rule.maxNoteLen);
        chbLimit.setSelected(true);
        if(rule.maxNoteLen == Double.MAX_VALUE)
        {
            spnNoteLength.setValue(0.0);
            chbLimit.setSelected(false);
        }
        cmbFilter.setSelectedItem(rule.mode);
        cmbMappings.setSelectedItem(rule.mapping);
        cmbPriority.setSelectedItem(rule.prty);

        System.out.println("updated to display " + rule);
    }//GEN-LAST:event_lstChannelsValueChanged

    private void cmbPriorityMouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_cmbPriorityMouseReleased
    {//GEN-HEADEREND:event_cmbPriorityMouseReleased
        btnSaveActionPerformed(null);
    }//GEN-LAST:event_cmbPriorityMouseReleased

    private void cmbPriorityMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_cmbPriorityMouseClicked
    {//GEN-HEADEREND:event_cmbPriorityMouseClicked

    }//GEN-LAST:event_cmbPriorityMouseClicked

    private void btnModApplyActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnModApplyActionPerformed
    {//GEN-HEADEREND:event_btnModApplyActionPerformed
        mods.set(lstMods.getSelectedIndex(), getMod());
        lstMods.setListData(mods.toArray());
        lstMods.setSelectedValue(getMod(), true);
    }//GEN-LAST:event_btnModApplyActionPerformed

    private void lstModsValueChanged(javax.swing.event.ListSelectionEvent evt)//GEN-FIRST:event_lstModsValueChanged
    {//GEN-HEADEREND:event_lstModsValueChanged
        updateMod((Manipulator)lstMods.getSelectedValue());
    }//GEN-LAST:event_lstModsValueChanged

    private void btnModUpActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnModUpActionPerformed
    {//GEN-HEADEREND:event_btnModUpActionPerformed
        int index = lstMods.getSelectedIndex();
        if(index <= 0)return;
        Collections.swap(mods, index, index - 1);
        lstMods.setListData(mods.toArray());
        lstMods.setSelectedIndex(index - 1);
    }//GEN-LAST:event_btnModUpActionPerformed

    private void btnModDownActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnModDownActionPerformed
    {//GEN-HEADEREND:event_btnModDownActionPerformed
        int index = lstMods.getSelectedIndex();
        if(index >= mods.size() - 1 || index == -1)return;
        Collections.swap(mods, index, index + 1);
        lstMods.setListData(mods.toArray());
        lstMods.setSelectedIndex(index + 1);
    }//GEN-LAST:event_btnModDownActionPerformed

    private void btnModRemoveActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnModRemoveActionPerformed
    {//GEN-HEADEREND:event_btnModRemoveActionPerformed
        int index = lstMods.getSelectedIndex();
        if(index == -1)return;
        mods.remove(index);
        lstMods.setListData(mods.toArray());
        lstMods.setSelectedIndex(index);
    }//GEN-LAST:event_btnModRemoveActionPerformed

    private void btnModNewActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnModNewActionPerformed
    {//GEN-HEADEREND:event_btnModNewActionPerformed
        mods.add(new Manipulator(Manipulator.Mode.move, Manipulator.Criteria.notePitch, false, 1, 1, 0.0, 100.0));//TODO modify defaults
        lstMods.setListData(mods.toArray());
        lstMods.setSelectedIndex(mods.size() - 1);//select new entry
    }//GEN-LAST:event_btnModNewActionPerformed

    private void radManipActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_radManipActionPerformed
    {//GEN-HEADEREND:event_radManipActionPerformed
        updateImage();
    }//GEN-LAST:event_radManipActionPerformed

    private void btnDrumApplyActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnDrumApplyActionPerformed
    {//GEN-HEADEREND:event_btnDrumApplyActionPerformed
        if(lstDrums.getSelectedIndex() == -1)return;
        drumKit.drums.get(lstDrums.getSelectedIndex()).drumID = (Integer)spnDrumID.getValue();
        lstDrums.setListData(drumKit.drums.toArray());
    }//GEN-LAST:event_btnDrumApplyActionPerformed

    private void lstDrumsValueChanged(javax.swing.event.ListSelectionEvent evt)//GEN-FIRST:event_lstDrumsValueChanged
    {//GEN-HEADEREND:event_lstDrumsValueChanged
        if(lstDrums.getSelectedIndex() == -1)return;
        System.out.println("setting spnDrumID to " + drumKit.drums.get(lstDrums.getSelectedIndex()).drumID);
        spnDrumID.setValue(drumKit.drums.get(lstDrums.getSelectedIndex()).drumID);
    }//GEN-LAST:event_lstDrumsValueChanged

    private void btnPlayDelayActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnPlayDelayActionPerformed
    {//GEN-HEADEREND:event_btnPlayDelayActionPerformed
        if(JOptionPane.showConfirmDialog(this, "Are you sure you want to start delayed playback? Will start in 15 seconds.") == JOptionPane.YES_OPTION)
        {
            try
            {
                Thread.sleep(15000);
                btnPlayActionPerformed(evt);
            } catch(InterruptedException ex)
            {
            }
        }
    }//GEN-LAST:event_btnPlayDelayActionPerformed
    public void updateMod(Manipulator m)
    {
        if(m == null)setModEnabled(false);
        else
        {
            setModEnabled(true);
            chbModInvert.setSelected(m.inverted);
            cmbModFrom.setSelectedIndex(m.channel - 1);
            cmbModTo.setSelectedIndex(m.destination - 1);
            cmbModCondition.setSelectedItem(m.criteria);
            cmbModMode.setSelectedItem(m.mode);
            spnModMax.setValue(m.max);
            spnModMin.setValue(m.min);
        }
    }
    public Manipulator getMod()
    {
        return new Manipulator((Manipulator.Mode)cmbModMode.getSelectedItem(),
                (Manipulator.Criteria)cmbModCondition.getSelectedItem(),
                chbModInvert.isSelected(), cmbModFrom.getSelectedIndex() + 1,
                cmbModTo.getSelectedIndex() + 1,
                (Double)spnModMin.getValue(),
                (Double)spnModMax.getValue());
    }
    public void setModEnabled(boolean state)
    {
        chbModInvert.setEnabled(state);
        cmbModFrom.setEnabled(state);
        cmbModTo.setEnabled(state);
        cmbModCondition.setEnabled(state);
        cmbModMode.setEnabled(state);
        spnModMax.setEnabled(state);
        spnModMin.setEnabled(state);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        try
        {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex)
        {
            ex.printStackTrace();
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new FilterGUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel ManipulatePanel;
    private javax.swing.JButton btnChannelReset;
    private javax.swing.JButton btnDrumApply;
    private javax.swing.JButton btnDrumReset;
    private javax.swing.JButton btnInit;
    private javax.swing.JButton btnLoadConfig;
    private javax.swing.JButton btnLoadSong;
    private javax.swing.JButton btnModApply;
    private javax.swing.JButton btnModDown;
    private javax.swing.JButton btnModNew;
    private javax.swing.JButton btnModRemove;
    private javax.swing.JButton btnModUp;
    private javax.swing.JButton btnPlay;
    private javax.swing.JButton btnPlayDelay;
    private javax.swing.JButton btnPlayFinal;
    private javax.swing.JButton btnRefreshFiles;
    private javax.swing.JButton btnRegenImage;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSaveConfig;
    private javax.swing.JButton btnStop;
    private javax.swing.JPanel channelPanel;
    private javax.swing.JCheckBox chbLimit;
    private javax.swing.JCheckBox chbModInvert;
    private javax.swing.JComboBox cmbConfigList;
    private javax.swing.JComboBox cmbFileList;
    private javax.swing.JComboBox cmbFilter;
    private javax.swing.JComboBox cmbMappings;
    private javax.swing.JComboBox cmbModCondition;
    private javax.swing.JComboBox cmbModFrom;
    private javax.swing.JComboBox cmbModMode;
    private javax.swing.JComboBox cmbModTo;
    private javax.swing.JComboBox cmbPriority;
    private javax.swing.JPanel controlsPanel;
    private javax.swing.JPanel drumPanel;
    private javax.swing.ButtonGroup imageModeGroup;
    private javax.swing.JScrollPane imageScroll;
    private javax.swing.JLabel imgLabel;
    private javax.swing.JPanel imgSettingsPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel lblNoteRange;
    private javax.swing.JLabel lblSongLength;
    private javax.swing.JLabel lblSongNotes;
    private javax.swing.JPanel leftPanel;
    private javax.swing.JList lstChannels;
    private javax.swing.JList lstDrums;
    private javax.swing.JList lstMods;
    private javax.swing.JRadioButton radFinal;
    private javax.swing.JRadioButton radManip;
    private javax.swing.JRadioButton radOrig;
    private javax.swing.JPanel rightPanel;
    private javax.swing.JSpinner spnDrumID;
    private javax.swing.JSpinner spnLength;
    private javax.swing.JSpinner spnModMax;
    private javax.swing.JSpinner spnModMin;
    private javax.swing.JSpinner spnNoteLength;
    private javax.swing.JSpinner spnOctave;
    private javax.swing.JSpinner spnWidth;
    private javax.swing.JTextArea txtTicker;
    // End of variables declaration//GEN-END:variables
}
